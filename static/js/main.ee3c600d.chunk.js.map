{"version":3,"sources":["types/SortType.ts","api/goodFromServer.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Empty","sortType","setSortType","isReverse","setIsReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","prev","map","visibleGood","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,qDCACC,G,YAA6B,CACxC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,Y,SDVUD,K,oBAAAA,E,gBAAAA,E,UAAAA,M,gBEgCL,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,OAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EA7BR,SACEC,EACAL,GAEC,IADDE,EACA,wDACMI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKRX,EAAYI,EAAcQ,UAAYR,EAOxBS,CAAiBnB,EAAiBI,EAAUE,GAOjE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAaL,EAASe,WAEpCS,QAAS,kBAAMlB,EAAYN,EAASe,WALtC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAaL,EAASiB,SAEpCO,QAAS,kBAAMlB,EAAYN,EAASiB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAa,SAAAiB,GAAI,OAAKA,MALvC,sBAUGpB,GAAYE,IACX,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA1Cc,WACxBlB,EAAYN,EAASI,OACrBI,GAAa,IAqCL,sBAUN,6BACGC,EAAaiB,KAAK,SAAAC,GAAW,OAC5B,oBAAsB,UAAQ,OAA9B,SAAsCA,GAA7BA,YCtFnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ee3c600d.chunk.js","sourcesContent":["export enum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Empty = '',\n}\n","export const goodsFromServer: string [] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { goodsFromServer } from './api/goodFromServer';\nimport { SortType } from './types/SortType';\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReverse = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReverse ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Empty);\n  const [isReverse, setIsReverse] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortType, isReverse);\n\n  const handleResetButton = () => {\n    setSortType(SortType.Empty);\n    setIsReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortType !== SortType.Alphabet,\n          })}\n          onClick={() => setSortType(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortType !== SortType.Length,\n          })}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReverse,\n          })}\n          onClick={() => setIsReverse(prev => !prev)}\n        >\n          Reverse\n        </button>\n        {\n          (sortType || isReverse) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleResetButton}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n      <ul>\n        {visibleGoods.map((visibleGood => (\n          <li key={visibleGood} data-cy=\"Good\">{visibleGood}</li>\n        )))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}